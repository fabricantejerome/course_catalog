{% extends 'partials/template.twig' %}

{% block head %}
	{{ parent() }}
	<style type="text/css">
		.code {
			width: 100px;
		}
		.units {
			width: 50px;
		}
		.course-code,
		.course-title {
			font-size: 30px;
			font-weight: bold;
			height: 50px;
		}
		#text-description {
			font-size: 15px;
			line-height: 1.7;
			padding-left: 30px;
			padding-right: 30px;
		}
	</style>
{% endblock %}

{% block content %}
{# Main content #}
<section class="content">
	<div class="row" id="app">
		<div class="col-md-12">
			{# Box element #}
			<div class="box box-danger">
				{# box-header #}
				<div class="box-header with-border">
					<h3 class="box-title">Search Curriculum</h3>
				</div>
				{# End of box header #}

				{# box body #}
				<div class="box-body">
					{# Row #}
					<div class="row">
						<div class="col-md-4">
							<select name="course-code" id="course-code" ref="courseCode" class="select2 form-control">
								<option selected disabled><-- Select Course --></option>
								<option v-for="entity of courseObject" v-bind:value="entity.id">
									${ entity.title }
								</option>
							</select>
						</div>

						<div class="col-md-2">
							<select name="year" id="year" ref="year" class="select2 form-control">
								<option selected disabled><-- Select Year --></option>
								<option v-for="(entity, index) of subjects" v-bind:value="index">
									${ yearValues[index] }
								</option>
							</select>
						</div>

						<div class="col-md-2">
							<select name="sem" id="sem" ref="sem" class="select2 form-control">
								<option selected disabled><-- Select Semester --></option>
								<option v-for="(entity, index) of subjects[yearSelected]" v-bind:value="index">
									${ semValues[index] }
								</option>
							</select>
						</div>

						<div class="col-md-4">
							<select name="subject" id="subject" ref="subject" class="select2 form-control">
								<option selected disabled><-- Select Subject --></option>
								<option v-for="(entity, index) of subjects[yearSelected][semSelected]" v-bind:value="entity.id">
									${ entity.title }
								</option>
							</select>
						</div>
					</div>
					{# Row #}

					{# Row #}
					<div class="row" v-if="_.isEmpty(subjectDetails)">
						<div class="col-md-12 text-center" v-if="subjects.firstYear.firstSem.length > 0">
							<h4>First Year</h4>
						</div>

						<div class="col-md-12 text-center" v-else-if="subjects.firstYear.secondSem.length > 0">
							<h4>First Year</h4>
						</div>

						<div class="col-md-6" v-if="subjects.firstYear.firstSem.length > 0">
							<h5>First Semester</h5>
							<table class="table">
								<thead>
									<tr>
										<th>Code</th>
										<th>Title</th>
										<th>Units</th>
									</tr>
								</thead>

								<tbody>
									<tr v-for="(item, index) in subjects.firstYear.firstSem">
										<td>${ item.code }</td>
										<td>${ item.title }</td>
										<td>${ item.units }</td>
									</tr>
								</tbody>
							</table>
						</div>

						<div class="col-md-6" v-if="subjects.firstYear.secondSem.length > 0">
							<h5>Second Semester</h5>
							<table class="table">
								<thead>
									<tr>
										<th>Code</th>
										<th>Title</th>
										<th>Units</th>
									</tr>
								</thead>

								<tbody>
									<tr v-for="(item, index) in subjects.firstYear.secondSem">
										<td>${ item.code }</td>
										<td>${ item.title }</td>
										<td>${ item.units }</td>
									</tr>
								</tbody>
							</table>
						</div>

						<div class="col-md-12 text-center" v-if="subjects.secondYear.firstSem.length > 0">
							<h4>Second Year</h4>
						</div>

						<div class="col-md-12 text-center" v-else-if="subjects.secondYear.secondSem.length > 0">
							<h4>Second Year</h4>
						</div>

						<div class="col-md-6" v-if="subjects.secondYear.firstSem.length > 0">
							<h5>First Semester</h5>
							<table class="table">
								<thead>
									<tr>
										<th>Code</th>
										<th>Title</th>
										<th>Units</th>
									</tr>
								</thead>

								<tbody>
									<tr v-for="(item, index) in subjects.secondYear.firstSem">
										<td>${ item.code }</td>
										<td>${ item.title }</td>
										<td>${ item.units }</td>
									</tr>
								</tbody>
							</table>
						</div>

						<div class="col-md-6" v-if="subjects.secondYear.secondSem.length > 0">
							<h5>Second Semester</h5>
							<table class="table">
								<thead>
									<tr>
										<th>Code</th>
										<th>Title</th>
										<th>Units</th>
									</tr>
								</thead>

								<tbody>
									<tr v-for="(item, index) in subjects.secondYear.secondSem">
										<td>${ item.code }</td>
										<td>${ item.title }</td>
										<td>${ item.units }</td>
									</tr>
								</tbody>
							</table>
						</div>

						<div class="col-md-12 text-center" v-if="subjects.thirdYear.firstSem.length > 0">
							<h4>Third Year</h4>
						</div>

						<div class="col-md-12 text-center" v-else-if="subjects.thirdYear.secondSem.length > 0">
							<h4>Third Year</h4>
						</div>

						<div class="col-md-6" v-if="subjects.thirdYear.firstSem.length > 0">
							<h5>First Semester</h5>
							<table class="table">
								<thead>
									<tr>
										<th>Code</th>
										<th>Title</th>
										<th>Units</th>
									</tr>
								</thead>

								<tbody>
									<tr v-for="(item, index) in subjects.thirdYear.firstSem">
										<td>${ item.code }</td>
										<td>${ item.title }</td>
										<td>${ item.units }</td>
									</tr>
								</tbody>
							</table>
						</div>

						<div class="col-md-6" v-if="subjects.thirdYear.secondSem.length > 0">
							<h5>Second Semester</h5>
							<table class="table">
								<thead>
									<tr>
										<th>Code</th>
										<th>Title</th>
										<th>Units</th>
									</tr>
								</thead>

								<tbody>
									<tr v-for="(item, index) in subjects.thirdYear.secondSem">
										<td>${ item.code }</td>
										<td>${ item.title }</td>
										<td>${ item.units }</td>
									</tr>
								</tbody>
							</table>
						</div>

						<div class="col-md-12 text-center" v-if="subjects.fourthYear.firstSem.length > 0">
							<h4>Fourth Year</h4>
						</div>

						<div class="col-md-12 text-center" v-else-if="subjects.fourthYear.secondSem.length > 0">
							<h4>Fourth Year</h4>
						</div>

						<div class="col-md-6" v-if="subjects.fourthYear.firstSem.length > 0">
							<h5>First Semester</h5>
							<table class="table">
								<thead>
									<tr>
										<th>Code</th>
										<th>Title</th>
										<th>Units</th>
									</tr>
								</thead>

								<tbody>
									<tr v-for="(item, index) in subjects.fourthYear.firstSem">
										<td>${ item.code }</td>
										<td>${ item.title }</td>
										<td>${ item.units }</td>
									</tr>
								</tbody>
							</table>
						</div>

						<div class="col-md-6" v-if="subjects.fourthYear.secondSem.length > 0">
							<h5>Second Semester</h5>
							<table class="table">
								<thead>
									<tr>
										<th>Code</th>
										<th>Title</th>
										<th>Units</th>
									</tr>
								</thead>

								<tbody>
									<tr v-for="(item, index) in subjects.fourthYear.secondSem">
										<td>${ item.code }</td>
										<td>${ item.title }</td>
										<td>${ item.units }</td>
									</tr>
								</tbody>
							</table>
						</div>
					</div>
					{# End row #}

					<div class="row" v-if="!_.isEmpty(subjectDetails)">
						<div class="col-md-12 text-center">
							<h3>${ subjectDetails.code } ${ subjectDetails.title }</h3>
							<hr>
							<p id="text-description">${ subjectDetails.description }</p>
							<br>
						</div>

						<div class="col-md-12 text-right">
							<button class="btn btn-danger" v-on:click="downloadFile">Download as PDF</button>
						</div>
					</div>
				</div>
				{# end box body #}
			</div>
			{# End of box #}
		</div>
	</div>
</section>
{# End main content #}
{% endblock %}
{% block script %}
	{{ parent() }}
	{# Vue #}
	<script src="{{ base_url('resources/js/axios/axios.min.js') }}"></script>
	<script src="{{ base_url('resources/js/vue/vue.min.js') }}"></script>
	<script src="{{ base_url('resources/js/lodash/lodash.js') }}"></script>
	<script src="{{ base_url('resources/js/vee-validate/vee-validate.min.js') }}"></script>
	<script src="{{ base_url('resources/js/jsPDF/dist/jspdf.debug.js') }}"></script>

	<script type="text/javascript">
		Vue.use(VeeValidate);

		const appUrl = "{{ base_url() }}";

		const courseId = "{{ id }}";

		const app = new Vue({
			el: '#app',
			delimiters: ['${', '}'],
			data: {
				course: {
					code: '',
					title: '',
				},
				courseObject: [],
				yearValues: { 
					firstYear: 'First Year',
					secondYear: 'Second Year',
					thirdYear: 'Third Year',
					fourthYear: 'Fourth Year',
				},
				semValues: { 
					firstSem: 'First Semester',
					secondSem: 'Second Semester',
				},
				courseSelected: '',
				yearSelected: 'firstYear',
				semSelected: 'firstSem',
				subjectSelected: '',
				subjectDetails: {},
				subjects: {
					firstYear: {
						firstSem: [], 
						secondSem: []
					},
					secondYear: {
						firstSem: [], 
						secondSem: []
					},
					thirdYear: {
						firstSem: [], 
						secondSem: []
					},
					fourthYear: {
						firstSem: [], 
						secondSem: []
					},
				},
				subjectOptions: []
			},
			created() {
				this.fetchCourses()
			},
			mounted() {
				const self = this

				$(self.$refs.courseCode).on('change', function() {
					let id = $(this).val()

					self.couse = self.getCourse(id)
					self.courseSelected = id
					self.fetchSubjects(id)
					self.subjectSelected = ''
					
					$(self.$refs.year).val('')
					$(self.$refs.sem).val('')
					self.subjectDetails = {}
				})

				$(self.$refs.year).on('change', function() {
					self.yearSelected = $(this).val()
					self.subjectSelected = ''
					self.subjectDetails = {}
					$(self.$refs.sem).val('')
					$(self.$refs.subject).val('')
				})

				$(self.$refs.sem).on('change', function() {
					self.semSelected = $(this).val()
					self.subjectSelected = ''
					self.subjectDetails = {}
					$(self.$refs.subject).val('')
				})

				$(self.$refs.subject).on('change', function() {
					self.subjectSelected = $(this).val()
					
					self.subjectDetails = self.binarySearch(self.subjects[self.yearSelected][self.semSelected], self.subjectSelected)
				})
			},
			methods: {
				addRow: function(container) {
					container.push({code: '', title: '', units: ''});
				},
				removeRow: function(container, index) {
					container.splice(index, 1)
				},
				getCourse: function(courseId) {
					axios({
						url: appUrl + 'curriculum/ajaxReadCourse/',
						method: 'post',
						data: {
							id: courseId
						}
					})
					.then((response) => {
						console.log(response.data)
						this.course = response.data
					})
					.catch((error) => {
						console.log(error)
					})
				},
				fetchSubjects: function(courseId) {
					axios({
						url: appUrl + 'curriculum/ajaxFetchSubjects/',
						method: 'post',
						data: {
							id: courseId
						}
					})
					.then((response) => {
						console.log(response.data)
						this.subjects = response.data
					})
					.catch((error) => {
						console.log(error)
					})
				},
				fetchCourses: function() {
					axios({
						url: appUrl + 'curriculum/ajaxFetchCourses/',
						method: 'get'
					})
					.then((response) => {
						console.log(response.data)
						this.courseObject = response.data
					})
					.catch((error) => {
						console.log(error)
					})
				},
				downloadFile: function() {
					let doc = new jsPDF();
					let description = doc.splitTextToSize((this.subjectDetails.code + ': ' + this.subjectDetails.title + ' - ' + this.subjectDetails.description), 180);
					doc.text(20, 30, this.course.title);
					doc.text(20, 50, description);

					// Save the PDF
					doc.save(this.subjectDetails.code + '.pdf')
				},
				binarySearch: function (list, value) {
					// initial values for start, middle and end
					let start = 0
					let stop = list.length - 1
					let middle = Math.floor((start + stop) / 2)

					// While the middle is not what we're looking for and the list does not have a single item
					while (list[middle].id !== value && start < stop) {
						if (value < list[middle].id) {
							stop = middle - 1
						} else {
							start = middle + 1
						}

						// recalculate middle on every iteration
						middle = Math.floor((start + stop) / 2)
					}

					// if the current middle item is what we're looking for return it's index, else return -1
					return (list[middle].id !== value) ? -1 : list[middle]
				}
			}
		});
	</script>
{% endblock %}